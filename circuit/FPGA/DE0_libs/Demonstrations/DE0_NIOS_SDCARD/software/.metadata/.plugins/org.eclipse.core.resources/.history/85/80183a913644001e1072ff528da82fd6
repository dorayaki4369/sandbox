// --------------------------------------------------------------------
// Copyright (c) 2009 by Terasic Technologies Inc. 
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// --------------------------------------------------------------------
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------


#include <stdio.h>
#include "terasic_includes.h"
#include "function.h"
#include "JtagUart.h"
#include "packet.h"
#include "DE0_Command.h"
#include "lcd.h"

void init(void){
  //  static alt_alarm alarm;
    bool bSuccess;

    bSuccess = JTAGUART_Open();  
    JTAGUART_ClearInput();    
    
}


bool test_ps2_mouse(void);

int main()
{
    alt_u32 time_start, ticks_per_sec, time_elapsed;
    alt_u8 *szPacket;
    
#if 0    
    while(1){
        if (test_ps2_mouse())
            printf("ms ok\r\n");
        else    
            printf("ms ng\r\n");
        usleep(100*1000);    
    }
#endif    
    
    time_start = alt_nticks();
    
  
    init();
   
    szPacket = malloc(PKT_NIOS2PC_MAX_LEN);
    if (!szPacket){
       // APP_DEBUG(("malloc (%d bytes)fail, program is terminated!\r\n", PKT_NIOS2PC_MAX_LEN));
        return 0;
    }    
    
  
    ticks_per_sec = alt_ticks_per_second();
    time_elapsed = alt_nticks() - time_start;
    //if (ticks_per_sec)
    //    APP_DEBUG(("Init takes %.3f sec\r\n",(float)time_elapsed/(float)ticks_per_sec));    
    while(1){
            if (!read_packet(szPacket)){
                continue;
            }     
              
            bool bResponse = TRUE, bSuccess = FALSE;
            time_start = alt_nticks();
            alt_u8 OP = szPacket[PKT_OP_INDEX];
            switch(OP){
                case OP_QUERY_NAME:
                    bSuccess = op_name_query(szPacket);
                    break;                
                case OP_EPCS_VERIFY:
                    bSuccess = op_epcs_verify(szPacket);
                    break;                
                case OP_FLASH_VERIFY:
                    bSuccess = op_flash_verify(szPacket);
                    break;                
                case OP_SDRAM_VERIFY:
                    bSuccess = op_sdram_verify(szPacket);
                    break;                
                case OP_PS2_VERIFY:
                    bSuccess = op_ps2_verify(szPacket);
                    break;  
                case OP_PIO_VERIFY:
                    bSuccess = op_gpio_verify(szPacket);
                    break;  
                case OP_PIO_HEADER_VERIFY:    
                    bSuccess = op_gpio_header_verify(szPacket);
                    break;  
                case OP_RS232_VERIFY:     
                    bSuccess = op_rs232_verify(szPacket);
                    break; 
                case OP_SDCARD_VERIFY:     
                    bSuccess = op_sdcard_verify(szPacket);
                    break; 
                case OP_CLK_VERIFY:     
                    bSuccess = op_clk_verify(szPacket);
                    break; 

                        
                default:    
                    bResponse = FALSE;
                    break; 
            }
            if (bResponse){  // report result to PC
                alt_u32 time_elapsed;
                PKLEN_TYPE pl_len;
                alt_u32 pk_len;
                memcpy(&pl_len, &szPacket[PKT_LEN_INDEX], sizeof(pl_len));  // payload len
                pk_len = pl_len + PKT_NONEPL_SIZE;
                if (pk_len > PKT_NIOS2PC_MAX_LEN){ 
                   // APP_DEBUG(("response packet len too long\r\n"));
                }else{
                    //DEBUG_PRINTF("pk_len=%d", pk_len);
                    //DEBUG_HEX_PRINTF(szPacket, pk_len);
                   // APP_DEBUG(("JTAGUART_Write (len=%d)...\r\n", pk_len));    
                    if (!JTAGUART_Write(szPacket, pk_len)){
                      //  APP_DEBUG(("send packet fail, len=%d\r\n", pk_len));
                    }  
                        
                }                    
                time_elapsed = alt_nticks() - time_start;
             //   APP_DEBUG(("\r\n%s(OP=%d, %d ms)\r\n", bSuccess?"ok":"ng", OP,  (int)(1000*time_elapsed/ticks_per_sec)));    
                JTAGUART_ClearInput();            
             }  // response
                        
        
    }  // while(1)

    return 0;
       
}
